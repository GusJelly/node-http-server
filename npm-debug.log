0 info it worked if it ends with ok
1 verbose cli [ '/usr/local/bin/node', '/usr/local/bin/npm', 'publish' ]
2 info using npm@2.14.2
3 info using node@v4.0.0
4 verbose publish [ '.' ]
5 silly cache add args [ '.', null ]
6 verbose cache add spec .
7 silly cache add parsed spec Result {
7 silly cache add   raw: '.',
7 silly cache add   scope: null,
7 silly cache add   name: null,
7 silly cache add   rawSpec: '.',
7 silly cache add   spec: '/home/bmiller/git/node-http-server',
7 silly cache add   type: 'directory' }
8 verbose addLocalDirectory /home/bmiller/.npm/node-http-server/3.0.4/package.tgz not in flight; packing
9 verbose tar pack [ '/home/bmiller/.npm/node-http-server/3.0.4/package.tgz',
9 verbose tar pack   '/home/bmiller/git/node-http-server' ]
10 verbose tarball /home/bmiller/.npm/node-http-server/3.0.4/package.tgz
11 verbose folder /home/bmiller/git/node-http-server
12 info prepublish node-http-server@3.0.4
13 verbose addLocalTarball adding from inside cache /home/bmiller/.npm/node-http-server/3.0.4/package.tgz
14 silly cache afterAdd node-http-server@3.0.4
15 verbose afterAdd /home/bmiller/.npm/node-http-server/3.0.4/package/package.json not in flight; writing
16 verbose afterAdd /home/bmiller/.npm/node-http-server/3.0.4/package/package.json written
17 silly publish { name: 'node-http-server',
17 silly publish   version: '3.0.4',
17 silly publish   description: 'A very simple and fast http server for node, bash, and spawnable from C, Python etc. It is lightweight and great for embedded solutions as well as everyday development or public facing apps.',
17 silly publish   main: 'server/http.js',
17 silly publish   directories: { example: 'example' },
17 silly publish   engines: { node: '>=0.10.0' },
17 silly publish   scripts: { test: 'echo "Error: no test specified" && exit 1' },
17 silly publish   repository:
17 silly publish    { type: 'git',
17 silly publish      url: 'git+https://github.com/RIAEvangelist/node-http-server.git' },
17 silly publish   keywords:
17 silly publish    [ 'http',
17 silly publish      'server',
17 silly publish      'embedded',
17 silly publish      'fast',
17 silly publish      'light',
17 silly publish      'lightweight',
17 silly publish      'bash',
17 silly publish      'c',
17 silly publish      'python',
17 silly publish      'html',
17 silly publish      'js',
17 silly publish      'img',
17 silly publish      'css' ],
17 silly publish   author: { name: 'Brandon Nozaki Miller' },
17 silly publish   license: 'DBAD',
17 silly publish   bugs: { url: 'https://github.com/RIAEvangelist/node-http-server/issues' },
17 silly publish   homepage: 'https://github.com/RIAEvangelist/node-http-server',
17 silly publish   readme: 'Node http server\n================\n----\n\nSimple to use stand alone node HTTP Server you can spin up from node apps, bash scripts, the commandline, C or python apps etc.\n\n` npm install node-http-server `\n\nnpm info :  [See npm trends and stats for node-http-server](http://npm-stat.com/charts.html?package=node-http-server&author=&from=&to=)  \n![node-http-server npm version](https://img.shields.io/npm/v/node-http-server.svg) ![supported node version for node-http-server](https://img.shields.io/node/v/node-http-server.svg) ![total npm downloads for node-http-server](https://img.shields.io/npm/dt/node-http-server.svg) ![monthly npm downloads for node-http-server](https://img.shields.io/npm/dm/node-http-server.svg) ![npm licence for node-http-server](https://img.shields.io/npm/l/node-http-server.svg)\n\nGitHub info :  \n![node-http-server GitHub Release](https://img.shields.io/github/release/RIAEvangelist/node-http-server.svg) ![GitHub license node-http-server license](https://img.shields.io/github/license/RIAEvangelist/node-http-server.svg) ![open issues for node-http-server on GitHub](https://img.shields.io/github/issues/RIAEvangelist/node-http-server.svg)\n\nPackage Quality :  \n![node-http-server Package Quality](http://npm.packagequality.com/badge/node-http-server.png)\n\n----\n\n\n## Defaults\n---\n#### currently modifiable via any interface, commandline, bash, node etc.\n\n    port        : 8080\n    root        : Current Working Directory (where you execute the command from)\n    domain      : 0.0.0.0\n    index       : index.html\n    verbose     : false\n    noCache     : true\n    log         : false\n    logFunction : serverLogging\n\n|key|description|\n|---|-----|\n|port| the port on which the server should run  |\n|root| the absolute location to the root dir for the public file system  |\n|domain| the domain which this server applies to. You can add more servers via the node `` domains ``  implementation described below than you can via bash or commandline. If you want to accept incoming requests for ***ANY Applicable Domain*** use `` 0.0.0.0 `` this will allow any request that is pointed at this machine on the specified port to use this server config.  |\n|index| the default file to look for in a dir. if not found a **404** will be displayed   |\n|verbose| should the server display detailed info about what it is doing  |\n|noCache| should the server prevent caching    |\n|log| full path to log file, if specified file is not present it will be created, however the dir must be there. ie. /tmp/server.log It is recommended that you timestamp this file name with a time stamp like : `` \'~/serverLogs/domain-\'+new Date().getTime()+\'.log\' `` this will create a new log file each time the server is started/restarted/reboot etc...  |\n|logFunction| this defaults to append timestamp to headers object and log as JSON in the `` log `` file. However, you can overwrite this and do whatever you like with the JSON data if you so choose. It accepts a javascript Object as the first argument for parsing. If you manually log to the default function. If you overwrite the function for custom logging, you must accept a javascript object as the first argument for the default log requests to function.  |\n\n---\n#### currently modifiable via node\n\n    domains     :   {}\n\n    contentType :   {\n        html    : \'text/html\',\n        css     : \'text/css\',\n        js      : \'text/javascript\',\n        json    : \'application/json\',\n        txt     : \'text/plain\',\n        jpeg    : \'image/jpeg\',\n        jpg     : \'image/jpeg\',\n        png     : \'image/png\',\n        gif     : \'image/gif\',\n        ico     : \'image/x-icon\',\n        appcache: \'text/cache-manifest\'\n    }\n\n    restrictedType: {}\n\n    errors  :   {\n        headers : {\n            \'Content-Type\' : \'text/plain\'\n        },\n        404: \'404 MIA\',\n        415: \'415 File type not supported\',\n        403: \'403 Access Denied\',\n        500: \'500 {{err}}\'\n    }\n\n|key|description|\n|---|-----------|\n|domains| this is a mapping of hostname to path. It can be used for multiple different domains, or for subdomains.|\n|contentType| mapping of file extension to header content type.  |\n|restrictedType| extensions to which external access will be denied.  |\n|errors| error headers and error strings, these can be anything you like from html to text etc. just make sure| they all can use the same headers. The **500** error will replace `` {{err}} `` in the specified value with the actual error message from the server.  |\n\n---\n\n## Commandline / bash use\n`` launch `` is an argument that specifies to launch the server now with the provided arguments and defaults\n\n    node ~/git/node-http-server/server/http.js root=~/myApp/ port=9999 launch=now\n\nyou can specify any of the variables frpom the ***currently modifiable via any interface, commandline, bash, node etc.*** section above. The order does not matter.\n\n    node ~/git/node-http-server/server/http.js root=~/myApp/ port=8888 verbose=true launch=now\n\n---\n\n## node app use\n\n    var server=require(\'node-http-server\');\n\n`` server `` has 2 methods, `` deploy `` and `` configTemplate ``\n\n|Server Method| description |\n|-------------|-------------|\n|server.configTemplate| will generate a complete config file based off of the default values and arguments passed in when launching the app. **DO NOT USE launch=now** as an argument for a node app. This will result in launching 2 servers, the one you specify with the arguments passed and then the one the node app launches too.|\n|server.deploy|will accept any config params and merge them with a fresh configTemplate, so passing a modified config based off of `` server.configTemplate() `` will result in using only the values from the modified config passed when deploying as it will override all of the defaults. ***The passed config object only merges to one level deep*** so if you pass a multi level object like `` contentTypes `` it will overwrite the default config with what you sent for that object rather than merging your object with the default.|\n\n---\n\n#### node examples\ncan be found in the examples folder\n\n#### basic\nthis app could be launched as  \n`` node basicApp.js verbose=true  ``  \nto force verbose terminal output. This can be helpful if you have many servers in a single app and want them all to be verbose right now for debugging or testing purposes.\n\n    var server=require(\'node-http-server\');\n\n    console.log(server);\n\n    server.deploy(\n        {\n            port:8000,\n            root:\'~/myApp/\'\n        }\n    );\n\n---\n#### verbose\n\n    var server=require(\'node-http-server\');\n\n    console.log(server);\n\n    server.deploy(\n        {\n            verbose:true,\n            port:8001,\n            root:\'~/myApp/\'\n        }\n    );\n\n---\n#### advanced\n\n    var server=require(\'node-http-server\');\n\n    console.log(server);\n\n    var config=server.configTemplate();\n    config.errors[\'404\']    = \'These are not the files you are looking for...\';\n    config.contentType.mp4  = \'video/mp4\';\n    config.port             = 8005;\n    config.verbose          = true;\n    config.root             = \'~/myApp/\'\n\n    server.deploy(config);\n\n---\n#### multiple domains or subdomains\n\n    var server=require(\'node-http-server\');\n\n    console.log(server);\n\n    server.deploy(\n        {\n            verbose:true,\n            port:8010,\n            root:process.env.HOME+\'/myApp/\',\n            domain:\'myapp\',\n            domains:{\n                \'a.myapp\':process.env.HOME+\'/myApp/mySubdomain/\',\n                \'yourapp.com\':process.env.HOME+\'/www/yourApp/\'\n            }\n        }\n    );    \n\n---\n\n## Starting with forever\n*It is helpful especially when running multiple servers to label them*  with `` --uid `` for easy to remember process names\n\n*when starting the same server many times, **like every time the system boots** you will want to append to the same log file* so use `` -a ``. Without `` -a `` forever will throw an error stating that the log file for the `` --uid `` already exists.\n\n    forever --uid nodeServer -a start ~/git/node-http-server/server/http.js root=~/myApp/ port=9999 launch=now\n\nThis can be set as a ``.profile`` command or a ``.bash_rc`` command as well if you want to launch the server every time the computer boots up.\n',
17 silly publish   readmeFilename: 'README.md',
17 silly publish   gitHead: '0ff29bbfce1dcbd51e02de6bdbe3cddd0c0d22cc',
17 silly publish   _id: 'node-http-server@3.0.4',
17 silly publish   _shasum: 'aad0486f15693dbc56ed94a1d81f667822aea899',
17 silly publish   _from: '.' }
18 verbose getPublishConfig undefined
19 silly mapToRegistry name node-http-server
20 silly mapToRegistry using default registry
21 silly mapToRegistry registry https://registry.npmjs.org/
22 silly mapToRegistry uri https://registry.npmjs.org/node-http-server
23 verbose publish registryBase https://registry.npmjs.org/
24 silly publish uploading /home/bmiller/.npm/node-http-server/3.0.4/package.tgz
25 verbose request uri https://registry.npmjs.org/node-http-server
26 verbose request sending authorization for write operation
27 info attempt registry request try #1 at 13:40:18
28 verbose request id 57452c5980687135
29 http request PUT https://registry.npmjs.org/node-http-server
30 http 403 https://registry.npmjs.org/node-http-server
31 verbose headers { 'content-type': 'application/json',
31 verbose headers   'cache-control': 'max-age=60',
31 verbose headers   'content-length': '95',
31 verbose headers   'accept-ranges': 'bytes',
31 verbose headers   date: 'Sun, 20 Sep 2015 20:40:19 GMT',
31 verbose headers   via: '1.1 varnish',
31 verbose headers   connection: 'keep-alive',
31 verbose headers   'x-served-by': 'cache-sjc3129-SJC',
31 verbose headers   'x-cache': 'MISS',
31 verbose headers   'x-cache-hits': '0',
31 verbose headers   'x-timer': 'S1442781618.921705,VS0,VE170' }
32 verbose request invalidating /home/bmiller/.npm/registry.npmjs.org/node-http-server on PUT
33 error publish Failed PUT 403
34 verbose stack Error: "You cannot publish over the previously published version 3.0.4." : node-http-server
34 verbose stack     at makeError (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:263:12)
34 verbose stack     at CachingRegistryClient.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:251:14)
34 verbose stack     at Request._callback (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:171:14)
34 verbose stack     at Request.self.callback (/usr/local/lib/node_modules/npm/node_modules/request/request.js:198:22)
34 verbose stack     at emitTwo (events.js:87:13)
34 verbose stack     at Request.emit (events.js:172:7)
34 verbose stack     at Request.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:1073:14)
34 verbose stack     at emitOne (events.js:82:20)
34 verbose stack     at Request.emit (events.js:169:7)
34 verbose stack     at IncomingMessage.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:1019:12)
35 verbose statusCode 403
36 verbose pkgid node-http-server
37 verbose cwd /home/bmiller/git/node-http-server
38 error Linux 3.13.0-63-generic
39 error argv "/usr/local/bin/node" "/usr/local/bin/npm" "publish"
40 error node v4.0.0
41 error npm  v2.14.2
42 error code E403
43 error "You cannot publish over the previously published version 3.0.4." : node-http-server
44 error If you need help, you may report this error at:
44 error     <https://github.com/npm/npm/issues>
45 verbose exit [ 1, true ]
